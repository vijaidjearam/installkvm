---
- hosts: kvm
  gather_facts: False
  remote_user: root
  vars: 
    host_name: "KVM2"
  tasks:
    - name: apt-get update
      raw: apt-get update -qq
    - name: Install python-minimal
      raw: apt-get install -qq python-minimal
    - shell: egrep '^flags.*(vmx|svm)' /proc/cpuinfo >/dev/null 2>&1 && echo ok || echo ko
      register: result
    - name: checking if the Virtitlaisaotion in enalbed in the BIOS?
      fail: 
        msg: "Either the machine is not virtualisation or the virtualisation is disabled in the BIOS"
      when: result.stdout == "ko" 
    - hostname:
        name: "{{ host_name }}"
    - name: Install the package KVM
      apt: 
        name: "{{ item }}"
        state: present
      with_items : 
        - qemu-kvm
        - libvirt-bin
        - virtinst
        - bridge-utils
        - cpu-checker
    - name: Check if Libvirtd is running
      command: systemctl status libvirtd
      ignore_errors: yes
      changed_when: false
      register: service_libvirtd_status

    - service:
        name: libvirtd
        state: restarted
       when: service_libvirtd_status|failed

    - stat: path=/etc/libvirt/qemu/networks/autostart/default.xml
      register: check_default

    - shell: rm /etc/libvirt/qemu/networks/autostart/default.xml
      when: check_default.stat.exists == True

    - copy:
        src: ./interfaces
        dest: /etc/network/interfaces
    - copy:
        src: ./br0
        dest: /etc/network/interfaces.d/br0
    - shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      sudo: true
      ignore_errors: true
    - name: waiting for server to come back
      local_action: wait_for host={{inventory_hostname}} state=started delay=30 timeout=100
      sudo: false
    - shell: vgs
      register: volumegroup
    - shell: vgcreate vgvm /dev/md2
      when: '"vgvm" not in volumegroup.stdout'
    - shell: virsh pool-list --all
      register: poollist
    - shell: virsh pool-define-as lvmpool logical --source-name vgvm --target /dev/vgvm
      when: ('"lvmpool" not in poollist.stdout') and ('"vgvm" in volumegroup.stdout')
    - shell: virsh pool-start lvmpool
    - shell: virsh pool-autostart lvmpool    
